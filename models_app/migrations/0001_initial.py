# Generated by Django 4.0 on 2023-07-18 12:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Позиция')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Блок',
                'verbose_name_plural': 'Блоки',
                'db_table': 'blocks',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='CalloutBlock',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models_app.block')),
                ('text', models.TextField(verbose_name='Текст')),
                ('image', models.ImageField(upload_to='callout_image_block/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Блок с картинкой и текстом',
                'verbose_name_plural': 'Блоки с картинкой и текстом',
                'db_table': 'callout_blocks',
            },
            bases=('models_app.block',),
        ),
        migrations.CreateModel(
            name='DividerBlock',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models_app.block')),
            ],
            options={
                'verbose_name': 'Блок с отступом',
                'verbose_name_plural': 'Блоки с отступом',
                'db_table': 'divider_blocks',
            },
            bases=('models_app.block',),
        ),
        migrations.CreateModel(
            name='ImageBlock',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models_app.block')),
                ('image', models.ImageField(upload_to='image_block/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Блок с картинкой',
                'verbose_name_plural': 'Блоки с картинкой',
                'db_table': 'image_blocks',
            },
            bases=('models_app.block',),
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models_app.block')),
                ('text', models.TextField(verbose_name='Текст')),
                ('type', models.CharField(choices=[('TEXT', 'Текст'), ('CODE', 'Текст с кодом'), ('HEADERTEXT', 'Заголовок'), ('QUOTETEXT', 'Поясняющий блок')], default='TEXT', max_length=11, verbose_name='Тип блока')),
            ],
            options={
                'verbose_name': 'Блок с текстом',
                'verbose_name_plural': 'Блоки с текстом',
                'db_table': 'text_blocks',
            },
            bases=('models_app.block',),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, verbose_name='Страница')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='image_page/', verbose_name='Иконка')),
                ('parent_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='models_app.page', verbose_name='Родительская страница')),
            ],
            options={
                'verbose_name': 'Страница',
                'verbose_name_plural': 'Страницы',
                'db_table': 'pages',
            },
        ),
        migrations.AddField(
            model_name='block',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks', related_query_name='block', to='models_app.page', verbose_name='Страница'),
        ),
        migrations.AddField(
            model_name='block',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='access_page', to='models_app.page', verbose_name='Страница')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='access_user', to='models_app.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Доступ',
                'verbose_name_plural': 'Доступы',
                'db_table': 'accesses',
            },
        ),
        migrations.CreateModel(
            name='LinkBlock',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models_app.block')),
                ('page_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='models_app.page', verbose_name='Страница (ссылка)')),
            ],
            options={
                'verbose_name': 'Блок с ссылкой',
                'verbose_name_plural': 'Блоки с ссылкой',
                'db_table': 'line_blocks',
            },
            bases=('models_app.block',),
        ),
    ]
